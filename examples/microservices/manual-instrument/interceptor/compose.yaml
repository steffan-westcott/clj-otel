volumes:
  m2:
    name: example.clj-otel.m2
    external: true
  gitlibs:
    name: example.clj-otel.gitlibs
    external: true

services:

  # Example microservice sum-service
  sum-service:
    image: clojure:temurin-22-tools-deps-alpine
    env_file: compose.env
    environment:
      OTEL_SERVICE_NAME: "sum-service"
      OTEL_RESOURCE_ATTRIBUTES: "service.instance.id=sum-service-1"
    volumes:
      - m2:/root/.m2
      - gitlibs:/root/.gitlibs
      - ../../../../clj-otel-api:/app/clj-otel-api:ro
      - ../../../../clj-otel-sdk-extension-autoconfigure:/app/clj-otel-sdk-extension-autoconfigure:ro
      - ../../../../clj-otel-instrumentation-runtime-telemetry-java17:/app/clj-otel-instrumentation-runtime-telemetry-java17:ro
      - ../../../common:/app/examples/common:ro
      - ./sum-service/deps.edn:/app/examples/microservices/manual-instrument/interceptor/sum-service/deps.edn:ro
      - ./sum-service/dev:/app/examples/microservices/manual-instrument/interceptor/sum-service/dev:ro
      - ./sum-service/resources:/app/examples/microservices/manual-instrument/interceptor/sum-service/resources:ro
      - ./sum-service/src:/app/examples/microservices/manual-instrument/interceptor/sum-service/src:ro
    working_dir: "/app/examples/microservices/manual-instrument/interceptor/sum-service"
    command: "clojure -J-XX:MaxRAMPercentage=70.0 -J-XX:+UseG1GC -M:log4j:dev -m example.sum-service.repl"
    mem_limit: 768mb
    memswap_limit: 768mb
    cpu_count: 2
    healthcheck:
      start_period: 120s
      interval: 5s
      timeout: 1s
      retries: 2
      test: "wget --spider -q http://localhost:8081/ping || exit 1"
    ports:
      - "8091:8091"      # nREPL server
    depends_on:
      otel-collector:
        condition: service_started


  # Example microservice average-service
  average-service:
    image: clojure:temurin-22-tools-deps-alpine
    env_file: compose.env
    environment:
      OTEL_SERVICE_NAME: "average-service"
      OTEL_RESOURCE_ATTRIBUTES: "service.instance.id=average-service-1"
      SERVER:
    volumes:
      - m2:/root/.m2
      - gitlibs:/root/.gitlibs
      - ../../../../clj-otel-api:/app/clj-otel-api:ro
      - ../../../../clj-otel-sdk-extension-autoconfigure:/app/clj-otel-sdk-extension-autoconfigure:ro
      - ../../../../clj-otel-instrumentation-runtime-telemetry-java17:/app/clj-otel-instrumentation-runtime-telemetry-java17:ro
      - ../../../common:/app/examples/common:ro
      - ./average-service/deps.edn:/app/examples/microservices/manual-instrument/interceptor/average-service/deps.edn:ro
      - ./average-service/dev:/app/examples/microservices/manual-instrument/interceptor/average-service/dev:ro
      - ./average-service/resources:/app/examples/microservices/manual-instrument/interceptor/average-service/resources:ro
      - ./average-service/src:/app/examples/microservices/manual-instrument/interceptor/average-service/src:ro
    working_dir: "/app/examples/microservices/manual-instrument/interceptor/average-service"
    command: "clojure -J-XX:MaxRAMPercentage=70.0 -J-XX:+UseG1GC -M:log4j:dev -m example.average-service.repl"
    mem_limit: 768mb
    memswap_limit: 768mb
    cpu_count: 2
    healthcheck:
      start_period: 120s
      interval: 5s
      timeout: 1s
      retries: 2
      test: "wget --spider -q http://localhost:8080/ping || exit 1"
    ports:
      - "8090:8090"      # nREPL server
    depends_on:
      sum-service:
        condition: service_healthy
      otel-collector:
        condition: service_started


  # Load generator for average-service
  average-load-gen:
    image: clojure:temurin-22-tools-deps-alpine
    env_file: compose.env
    ports:
      - "8092:8092"      # nREPL server
    volumes:
      - m2:/root/.m2
      - gitlibs:/root/.gitlibs
      - ../../../common:/app/examples/common:ro
      - ./average-load-gen/deps.edn:/app/examples/microservices/manual-instrument/interceptor/average-load-gen/deps.edn:ro
      - ./average-load-gen/dev:/app/examples/microservices/manual-instrument/interceptor/average-load-gen/dev:ro
      - ./average-load-gen/resources:/app/examples/microservices/manual-instrument/interceptor/average-load-gen/resources:ro
      - ./average-load-gen/src:/app/examples/microservices/manual-instrument/interceptor/average-load-gen/src:ro
    working_dir: "/app/examples/microservices/manual-instrument/interceptor/average-load-gen"
    command: "clojure -J-XX:MaxRAMPercentage=70.0 -M:log4j:dev -m example.average-load-gen.repl"
    mem_limit: 768mb
    memswap_limit: 768mb
    depends_on:
      average-service:
        condition: service_healthy


  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.135.0
    environment:
      GOMEMLIMIT: "400MiB"
    volumes:
      - ./otel-collector.yaml:/etc/otel-collector.yaml
    command:
      - --config=/etc/otel-collector.yaml
    depends_on:
      tempo:
        condition: service_started
      prometheus:
        condition: service_started


  # Loki
  loki:
    image: grafana/loki:3.5.5
    volumes:
      - ./loki.yaml:/etc/loki.yaml
    command: -config.file=/etc/loki.yaml


  # Tempo
  tempo:
    image: grafana/tempo:2.8.2
    volumes:
      - ./tempo.yaml:/etc/tempo.yaml
    command:
      - -config.file=/etc/tempo.yaml


  # Prometheus
  prometheus:
    image: prom/prometheus:v3.5.0
    volumes:
      - ./prometheus.yaml:/etc/prometheus.yaml
    command:
      - --config.file=/etc/prometheus.yaml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage


  # Grafana
  grafana:
    image: grafana/grafana-oss:12.1.1
    volumes:
      - ./grafana-datasources.yaml:/etc/grafana/provisioning/datasources/grafana-datasources.yaml:ro
      - ./grafana-dashboards.yaml:/etc/grafana/provisioning/dashboards/grafana-dashboards.yaml:ro
      - ../../../common/dashboards/JVM.json:/var/lib/grafana/dashboards/JVM.json:ro
      - ../../../common/dashboards/HTTP-server-instances.json:/var/lib/grafana/dashboards/HTTP-server-instances.json:ro
      - ../../../common/dashboards/HTTP-server-routes.json:/var/lib/grafana/dashboards/HTTP-server-routes.json:ro
      - ./dashboards/overview.json:/var/lib/grafana/dashboards/overview.json:ro
      - ./dashboards/sums-and-averages.json:/var/lib/grafana/dashboards/sums-and-averages.json:ro
    environment:
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/overview.json
      - GF_NEWS_NEWS_FEED_ENABLED=false
    ports:
      - "3000:3000"       # Grafana web interface
    depends_on:
      - loki
      - tempo
      - prometheus
